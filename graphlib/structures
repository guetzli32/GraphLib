#ifndef GL_STRUCTURES
#define GL_STRUCTURES

#include "src/partial_specialization_on"
#include "src/gl_assert.hpp"
#include "src/gl_base.hpp"

#include "src/structures/DisjointSets.hpp"
#include "src/structures/Distance.hpp"
#include "src/structures/Edge.hpp"
#include "src/structures/Node.hpp"
#include "src/structures/Property.hpp"
#include "src/structures/Graph.hpp"
#include "src/structures/Color.hpp"

namespace gl {

#define GL_TYPEDEFS_FIXED_SCALAR_DIR(Scalar,ScalarSuffix,Storage,StorageSuffix,Direction,DirectionSuffix) \
using graph##StorageSuffix##ScalarSuffix##DirectionSuffix = Graph<Scalar,Storage,Direction>;

#define GL_TYPEDEFS_FIXED_SCALAR(Scalar,ScalarSuffix,Direction,DirectionSuffix) \
GL_TYPEDEFS_FIXED_SCALAR_DIR(Scalar, ScalarSuffix, gl::Matrix, M, Direction, DirectionSuffix) \
GL_TYPEDEFS_FIXED_SCALAR_DIR(Scalar, ScalarSuffix, gl::List,   L, Direction, DirectionSuffix)

#define GL_TYPEDEFS(Scalar,ScalarSuffix) \
GL_TYPEDEFS_FIXED_SCALAR(Scalar, ScalarSuffix, gl::Directed,   d)\
GL_TYPEDEFS_FIXED_SCALAR(Scalar, ScalarSuffix, gl::Undirected, u)

GL_TYPEDEFS(int,    i)
GL_TYPEDEFS(float,  f)
GL_TYPEDEFS(double, d)

#undef GL_TYPEDEFS_FIXED_SCALAR_DIR
#undef GL_TYPEDEFS_FIXED_SCALAR
#undef GL_TYPEDEFS

} // namespace gl

#endif // GL_STRUCTURES